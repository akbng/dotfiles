#!/bin/bash

SUDO=''
declare -a REPOS=('universe' 'multiverse' 'restricted' 'ppa:neovim-ppa/unstable' 'ppa:ubuntu-toolchain-r/test' 'ppa:obsproject/obs-studio')
declare -a DEPENDENCIES=('git' 'gh' 'neovim' 'build-essential' 'bashtop' 'wget' 'curl' 'clang' 'cmake' 'tmux' 'file' 'fd-find' 'rip-grep' 'grep' 'fonts-powerline' 'vlc' 'python3' 'stow' 'gnome-tweaks' 'zsh' 'gcc' 'g++' 'python3-pip' 'zoxide' 'ruby-full' 'obs-studio' 'screenkey')
declare -a SNAP_PACKAGES=('spotify' 'bitwarden')
declare -a PIP_PACKAGES=('asciinema' 'howdoi')

if [ "$EUID" -ne 0 ]; then
	SUDO='sudo'
fi

for REPO in "${REPOS[@]}"; do
	if ! grep -q "$REPO" /etc/apt/sources.list; then
		echo "Adding $REPO to apt source list..."
		$SUDO add-apt-repository "$REPO" -y
	fi
done

echo 'Updating Repositories...'
$SUDO apt update >/dev/null 2>&1
echo 'Upgrading System...'
$SUDO apt upgrade

echo 'Installing Dependencies...'
for DEPENDENCY in "${DEPENDENCIES[@]}"; do
	if ! dpkg -s "$DEPENDENCY" >/dev/null 2>&1; then
		echo "Installing $DEPENDENCY..."
		$SUDO apt install "$DEPENDENCY" -y >/dev/null 2>&1
		echo "Installed $DEPENDENCY"
	fi
done

if [ -x "$(command -V pip)" ]; then
	for DEPS in "${PIP_PACKAGES[@]}"; do
		echo "Installing Python Dependencies..."
		$SUDO pip install "$DEPS" >/dev/null 2>&1
		echo "Insalled $DEPS"
	done
fi

echo "Installing colorls"
if [ -x "$(command -v gem)" ]; then
	$SUDO gem install colorls
fi

if [ -x "$(command -v nvim)" ]; then
	echo 'Setting up NvChad for Neovim...'
	git clone https://github.com/NvChad/NvChad ~/.config/nvim --depth 1
	echo 'NvChad Setup Successfull'
fi

# TODO: write a bin to update kitty and setup a cron job for that
echo 'Installing Kitty terminal...'
curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
mkdir -p ~/.local/bin
sudo ln -s ~/.local/kitty.app/bin/kitty /usr/bin/kitty
sudo ln -s ~/.local/kitty.app/bin/kitten /usr/bin/kitten
sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator /usr/bin/kitty 50
echo 'Kitty terminal installed successfully'

# TODO: write a bin to update nerd-fonts
echo 'Installing patched font...'
git clone 'https://github.com/ryanoasis/nerd-fonts.git' ~/nerd-fonts --depth 1
cd ~/nerd-fonts && ./install.sh FiraCode, Lilex >/dev/null 2>&1
echo 'FiraCode and Lilex installed successfully'

# if ! [ -x "$(command -v zsh)" ]; then
#     echo 'Installing ZSH separately...'
#     $SUDO apt install zsh && $SUDO dpkg-reconfigure dash && $SUDO reboot
# fi

path_to_zshrc="$(which zsh)"

change_shell() {
	echo 'Changing shell to zsh...'
	if [ "$EUID" -eq 0 ]; then # If root, don't change shell
		echo 'Script is running as root. Skipping shell change.'
		echo 'Skipping...'
		return 1
	fi

	chsh -s "$path_to_zshrc"
}

if [ "$SHELL" != "$path_to_zshrc" ]; then
	echo "Do you want to change your default shell to zsh?"
	select yn in "Yes" "No"; do
		case $yn in
		Yes)
			change_shell
			break
			;;
		No) break ;;
		esac
	done
fi

install_omz() {
	echo 'Installing OH-MY-ZSH...'
	sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
	echo 'Installing zsh-nvm plugin...'
	git clone https://github.com/lukechilds/zsh-nvm "$HOME/oh-my-zsh/custom/plugins/zsh-nvm"
	echo 'Installing powerlevel10k...'
	git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k"
}

if ! [ -d "$HOME/.oh-my-zsh" ] || [ -x "$(command -v omz)" ]; then
	echo "Do you wish to install OH-MY-ZSH?"
	select yn in "Yes" "No"; do
		case $yn in
		Yes)
			install_omz
			break
			;;
		No)
			echo 'Skipping OH-MY-ZSH'
			break
			;;
		esac
	done
fi

if ! [ -x "$(command -v nvm)" ]; then
	echo 'Installing nvm manually...'
	curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
else
	echo 'NVM is already installed.'
	echo 'Skipping NVM installation...'
fi

if ! [ -x "$(command -v node)" ]; then
	echo "Installing NodeJS..."
	echo "Do you wish to install LTS version of NodeJS?"
	select yn in "Yes" "No"; do
		case $yn in
		Yes)
			nvm install --lts
			break
			;;
		No)
			nvm install node
			break
			;;
		esac
	done
else
	echo "NodeJS is already installed."
	echo 'Skipping NodeJS installation...'
fi

# TODO: Install yarn with current instructions

if ! [ -x "$(command -v code)" ]; then
	echo 'Installing VSCode...'
	wget https://go.microsoft.com/fwlink/?LinkID=760868 -O /tmp/code.deb
	$SUDO dpkg -i /tmp/code.deb
else
	echo 'VSCode is already installed.'
	echo 'Skipping VSCode installation...'
fi

themes_dir="/usr/share/themes"
if ! [ -d "$themes_dir/gtk-master" ] || [ -d "$themes_dir/Dracula" ]; then
	echo 'Downloading Dracula gtk theme...'
	$SUDO wget https://github.com/dracula/gtk/archive/master.zip -P /tmp/
	echo "Extracting Dracula gtk theme to $themes_dir..."
	$SUDO unzip -q /tmp/master.zip -d "$themes_dir/"
	$SUDO mv "$themes_dir/gtk-master" "$themes_dir/Dracula"
fi

# icons_dir="/usr/share/icons"
git clone https://github.com/catppuccin/cursors.git ~/.cursors --depth 1 >/dev/null 2>&1
echo "Cloned the cursors directory into ~/.cursors"
echo "Please unzip the cursors from the ~/.cursors/cursors to change from Gnome Tweaks"

echo 'Customising the dock...'
gsettings set org.gnome.shell.extensions.dash-to-dock extend-height false
gsettings set org.gnome.shell.extensions.dash-to-dock dock-position BOTTOM
gsettings set org.gnome.shell.extensions.dash-to-dock dash-max-icon-size 32
gsettings set org.gnome.shell.extensions.dash-to-dock unity-backlit-items false
gsettings set org.gnome.shell.extensions.dash-to-dock transparency-mode DYNAMIC

echo 'Changing the DESKTOP theme to Dracula...'
echo '[REMEMBER] You can always customize the theme manually using Gnome Tweaks.'
gsettings set org.gnome.desktop.interface gtk-theme "Dracula"
gsettings set org.gnome.desktop.wm.preferences theme "Dracula"

echo 'Installing Snap packages...'
for SNAP_PACKAGE in "${SNAP_PACKAGES[@]}"; do
	if ! [ -x "$(command -v $SNAP_PACKAGE)" ]; then
		echo "Installing $SNAP_PACKAGE..."
		$SUDO snap install "$SNAP_PACKAGE"
	else
		echo "$SNAP_PACKAGE is already installed."
		echo 'Skipping...'
	fi
done

echo 'sym linking dotfiles for nvim, kitty, zsh'
cp ~/.zshrc ~/.zshrc.bak # Back up current zshrc file
stow .

echo 'Finished the setup procudure!'
echo 'Your system might need to reboot for changes to take effect!'
echo 'Please check your ~/.zshrc file in case of ERRORS!'

while true; do
	read -pr "Restart now? [Y/N] " yn
	case $yn in
	[Yy]*)
		$SUDO reboot
		break
		;;
	[Nn]*) exit ;;
	esac
done
